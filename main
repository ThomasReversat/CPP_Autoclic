#include <iostream>
#include <chrono>
#include <ctime>
#include <windows.h> // SDK windows
#include <windowsx.h>
#include <string>
#include "Cycle.hpp"
#include "Tache.hpp"
#define NOMBRE 10
//#define TIME 5.

using namespace std;
#define _WIN32_WINNT 0x0500
// definition des fonctions clics ici
void clic_ici(int x,int y)
{
    INPUT i[2];
    memset(i, 0, sizeof(i));
    i[0].type = i[1].type = INPUT_MOUSE;
    i[0].mi.dx = (65535. / (double)GetSystemMetrics(SM_CXSCREEN)) * x;
    i[0].mi.dy = (65535. / (double)GetSystemMetrics(SM_CYSCREEN)) * y;
    i[0].mi.dwFlags = MOUSEEVENTF_MOVE|MOUSEEVENTF_ABSOLUTE|MOUSEEVENTF_LEFTDOWN;
    i[1].mi.dwFlags = MOUSEEVENTF_LEFTUP;
    SendInput(2, i, sizeof(INPUT));
}

void enchainer_clic(int x,int y,int nb)
{
    for(int i=0;i<nb;i++) // suite de clics (de repetitions)
    {
        clic_ici(x,y); // on enchaine nb clics
    }
}

void clic_tache_duree_simple(int x, int y, std::string tache)
{
    /* realise un clique à la position (x,y) pour une tache donnee */
    cout <<"Veuillez saisir une tache"<<endl;
    cin >>tache;
    clic_ici(x,y);
}
string renommerTache(string mot)
{
    /*renommer une tache t */
    string tache = mot;
    return tache;
}
void supprimerTache(string t)
{
    t.clear(); // supprime une tache t
}
string dupliquerTache(string t,int n)
{
    string tache = " ";
    for(int i=0;i<n;i++)/* n tours de boucles */
    {
        tache = tache +"\n"+t+"\n";
    }
    return tache;
}
string ajouterTache(string t)
{
    /* ajouter une tache t dans une autre tache  */
    string tache=" ";
    tache.append(t);
    return t;
}

void historiqueTaches(vector <string>tab,string tache,int i)
{
    /* affiche l'historique des taches dans un tableau de vector à la i eme position */
    tab[i]=tache;
}
void clic_duree(int x,int y,float t,int nb)
{
    /* effectue un clic au position x et y de duree t un nombre de fois nb */

    for(int i=0;i<nb;i++)
    {
        clic_ici(x,y);
        Sleep(t); // une pause en milliseconde
    }
}
void renommer_tache(const string nomFichier)
{
    /* renomme une tache dans un fichier */
    ofstream monFlux(nomFichier.c_str()); // declaration d'un flux permettant d'ecrire dans un fichier

    if(monFlux) // on verifie si tout est OK
    {
        monFlux<<"Veuillez saisir la tache a renommer"<<endl;
        monFlux<<"La tache a renommer sera : Clic enchaines"<<endl;
    }
    else
    {
        cout << "ERREUR: Impossible d'ouvrir le fichier." << endl;
    }
    //  monFlux.close();
}
void renommer_tache_lire(const string nomFichier)
{
    /* recupere le texte ecrit par l'utilisateur dans un fichier */

    ifstream fichier("C:\\Users\\bilel\\Desktop\\CPP/lecture_renommage_fichier");

    if(fichier)
    {
        //L'ouverture s'est bien passée, on peut donc lire

        string ligne; //Une variable pour stocker les lignes lues

        while(getline(fichier, ligne)) //Tant qu'on n'est pas à la fin, on lit
        {
            cout << ligne << endl;
            //Et on l'affiche dans la console
            //Ou alors on fait quelque chose avec cette ligne
            //À vous de voir
        }
    }
    else
    {
        cout << "ERREUR: Impossible d'ouvrir le fichier en lecture." << endl;
    }
}
int main() {
    clock_t temps_initial = clock();
    string tache0;
    string tache1;
    string tache2;
    string tache3;
    string tache4;
    string tache5;
    string tache6;
    string tache14;
    string tache7;
    string tache8, tache9, tache10, tache11, tache12, tache13, tache15, tache16, tache17;
    int var0;
    int var1;
    int var2;
    int var3;
    int x, y;
    int val;
    int tache(0);
    int b1, b2;
    float time;
    vector<string> tab; //tableau d'historique des taches
    auto t_start = std::chrono::high_resolution_clock::now();
    cout << "Bonjour" << endl;
    cout << "Veuillez saisir un entier qui representera la liste des taches" << endl;
    cout << "Cet entier doit etre compris entre 0 et 4" << endl;
    cin >> tache;
    switch (tache) {
        case 0 :

            cout << "Click Interval" << endl; // tache 1
            cout << "==================================================" << endl;
            cout << " 0- Souhaitez vous renommer la tache ?" << endl;
            cout << " 1 - Souhaitez vous la supprimer ?" << endl;
            cout << " 2 - Souhaitez vous dupliquez la tache" << endl;
            cout << " 3 - Souhaitez vous ajoutez la tache" << endl;
            cout << "==================================================" << endl;
            cout << "Veuillez saisir un entier mais compris entre 0 et 3" << endl;
            cin >> var0;
            switch (var0) {
                case 0 :
                    cout << "Veuillez saisir le nom d'une tache " << endl;

                    cin >> tache0;
                    // cin.ignore();
                    renommerTache(tache0);
                    cout << renommerTache(tache0) << endl;
                    cout << "==================================================" << endl;
                    cout << "un interval de temps sera definie entre l'interval des deux clics automatiquement" << endl;
                    cout << "Saisir les coordonnes du clics" << endl;
                    Sleep(5000);
                    cin >> x >> y;
                    cout << "les coordonnes du clics sont (" << x << "," << y << ")" << endl;
                    clic_ici(x, y);
                    cout << "le programme effectue la tache au coordonnes" << x << y << endl;
                    Sleep(9000);
                    cout << "Souhaitez vous enchainez les clics gauche et droit ?" << endl;
                    cout << "Saisir True pour effectuez la tache ou False pour continuez ou bien les chiffres 1 et 0"<< endl;
                    cin >> b1;
                    if (b1 == 1) {
                        enchainer_clic(x, y, NOMBRE);
                    }
                    // else on continue


                    historiqueTaches(tab, "renommer Tache", 0); // position 0

                    break;
                case 1:
                    cout << "Saisir une tache que vous souhaitez supprimez" << endl;
                    cin >> tache1;
                    supprimerTache(tache1);
                    cout << "========================================================" << endl;
                    cout << "un interval de temps est definit automatiquement" << endl;
                    cout << "Saisir les coordonnes du clics" << endl;
                    cin >> x >> y;
                    cout << "(" << x << "," << y << ")" << endl;
                    cout << "Souhaitez vous enchainez des clics ?" << endl;
                    cout << "Y/N" << endl;
                    cin >> tache2;
                    cout << "Veuillez choisir une duree" << endl;
                    cin >> time;
                    cout << time << endl;
                    clic_duree(x, y, time, NOMBRE);
                    cout << "le programme effectue la tache au coordonnes" << x << y << endl;
                    Sleep(9000);
                    historiqueTaches(tab, "supprimez tache", 1);
                    break;
                case 2 :
                    cout << "Saisir une tache que vous souhaitez dupliquez" << endl;
                    cin >> tache3;
                    dupliquerTache(tache3, 5);
                    cout << dupliquerTache(tache3, 5) << endl;
                    cout << "==================================================" << endl;
                    cout << "un interval de temps est definit automatiquement" << endl;
                    cout << "Saisir les coordonnes du clics" << endl;
                    cin >> x >> y;
                    cout << "(" << x << "," << y << ")" << endl;
                    cout << "Souhaitez vous enchainez des clics ?" << endl;
                    cout << "Y/N" << endl;
                    cin >> tache4;
                    cout << "Veuillez choisir une duree" << endl;
                    cin >> time;
                    cout << time << endl;
                    clic_duree(x, y, time, NOMBRE);
                    cout << "le programme effectue la tache au coordonnes" << x<<" "<<y<<endl;
                    Sleep(9000);
                    historiqueTaches(tab, "dupliquez tache", 2);
                    break;
                case 3 :
                    cout << "saisir une tache que vous souhaitez ajoutez dans la liste" << endl;
                    cin >> tache5;
                    ajouterTache(tache5);
                    cout << "==================================================================";
                    cout << "un interval de temps est definit automatiquement" << endl;
                    cout << "Saisir les coordonnes du clics" << endl;
                    cin >> x >> y;
                    cout << "(" << x << "," << y << ")" << endl;
                    cout << "Souhaitez vous enchainez des clics ?" << endl;
                    cout << "Y/N" << endl;
                    cin >> tache6;
                    cout << "Veuillez choisir une duree" << endl;
                    cin >> time;
                    cout << time << endl;
                    clic_duree(x, y, time, NOMBRE);
                    cout << "le programme effectue la tache au coordonnes" << x << y << endl;
                    Sleep(9000);
                    historiqueTaches(tab, "ajouter une tache", 3);
                    break;



            }
        case 1:
            cout << "Clic Repetition" << endl; //tache 2
            cout << "==================================================" << endl;
            cout << " 0- Souhaitez vous renommer la tache ?" << endl;
            cout << " 1 - Souhaitez vous la supprimer ?" << endl;
            cout << " 2 - Souhaitez vous dupliquez la tache" << endl;
            cout << " 3 - Souhaitez vous ajoutez la tache" << endl;
            cout << "==================================================" << endl;
            cout << "Veuillez saisir un entier mais compris entre 0 et 3" << endl;
            int a;
            cin >> a;
            if (a == 0) {
                cout << "un temps d'execution est lance automatiquement" << endl;
                renommerTache("enchainement clics");
                cout << renommerTache("enchainement clics") << endl;
                cout << "vous allez enchainez les clics aux coordonnes 15, 3" << endl;
                enchainer_clic(15, 3, NOMBRE);
                Sleep(9000);

            }
            if (a == 1) {
                cout << "un temps d'execution est lance automatiquement" << endl;
                supprimerTache("enchainement clics");
                cout << renommerTache("enchainement clics") << endl;
                cout << "vous allez enchainez les clics aux coordonnes 15, 3" << endl;
                enchainer_clic(15, 3, NOMBRE);
                Sleep(9000);
            }
            if (a == 2) {
                cout << "un temps d'execution est lance automatiquement" << endl;
                dupliquerTache("enchainement clics", 4);
                cout << dupliquerTache("enchainement clics", 4) << endl;
                cout << "vous allez enchainez les clics aux coordonnes 15, 3" << endl;
                enchainer_clic(15, 3, NOMBRE);
                Sleep(9000);
            }
            if (a == 3) {
                cout << "un temps d'execution est lance automatiquement" << endl;
                ajouterTache("enchainement clics");
                cout << ajouterTache("enchainement clics") << endl;
                cout << "vous allez enchainez les clics aux coordonnes 15, 3" << endl;
                enchainer_clic(15, 3, NOMBRE);
                Sleep(9000);
            }
            break;

        case 2:
            cout << "Cursor Position" << endl;
            cout << "==================================================" << endl;
            cout << " 0- Souhaitez vous renommer la tache ?" << endl;
            cout << " 1 - Souhaitez vous la supprimer ?" << endl;
            cout << " 2 - Souhaitez vous dupliquez la tache" << endl;
            cout << " 3 - Souhaitez vous ajoutez la tache" << endl;
            cout << "==================================================" << endl;
            cout << "Veuillez saisir un entier mais compris entre 0 et 3" << endl;
            int b;
            cin >> b;
            if (a == 0) {
                renommerTache("curseur position");
                cout << renommerTache("curseur position") << endl;
                SetCursorPos(15, 2);
                cout <<"programme en cours ; le curseur se deplace aux position (15,2)"<<endl;
            }
            if (a== 1)
            {
                supprimerTache("curseur position");
                //cout <<supprimerTache("curseur position")<<endl;
                SetCursorPos(16,3);
                cout <<"programme en cours ; le curseur se deplace aux position (15,2)"<<endl;
            }
            if (a == 2)
            {
                dupliquerTache("curseur position tache",5);
                cout<<dupliquerTache("curseur position tache",5);
                SetCursorPos(16,3);
                cout <<"programme en cours ; le curseur se deplace aux position (15,2)"<<endl;
            }
            if(a==3)
            {
                ajouterTache("curseur tache");
                SetCursorPos(17,5);
                cout <<"programme en cours ; le curseur se deplace aux position (15,2)"<<endl;
            }
            break;

        case 3 : cout << "Cursor Options"<<endl;
            cout << "==================================================" << endl;
            cout << " 0- Souhaitez vous renommer la tache ?" << endl;
            cout << " 1 - Souhaitez vous la supprimer ?" << endl;
            cout << " 2 - Souhaitez vous dupliquez la tache" << endl;
            cout << " 3 - Souhaitez vous ajoutez la tache" << endl;
            cout << "==================================================" << endl;
            cout << "Veuillez saisir un entier mais compris entre 0 et 3" << endl;
            int d;
            cin >> d;
            if (d == 0)
            {
                renommerTache("clic Options");
                cout <<renommerTache("clic options")<<endl;
                for(int i= 0;i<3;i++)
                {
                    if (GetAsyncKeyState('A') & 0x8000)
                    {
                        INPUT input;
                        input.type = INPUT_MOUSE;
                        input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
                        SendInput(1, &input, sizeof(INPUT));

                        input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
                        SendInput(1, &input, sizeof(INPUT));
                    }
                    if (d == 1)
                    {
                        supprimerTache("clic options");
                        if (GetAsyncKeyState('A') & 0x8000)
                        {
                            INPUT input;
                            input.type = INPUT_MOUSE;
                            input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
                            SendInput(1, &input, sizeof(INPUT));

                            input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
                            SendInput(1, &input, sizeof(INPUT));
                        }
                    }
                    if(d==2){
                        dupliquerTache("clic options",8);
                        cout<<dupliquerTache("clic options",8);
                        if (GetAsyncKeyState('A') & 0x8000)
                        {
                            INPUT input;
                            input.type = INPUT_MOUSE;
                            input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
                            SendInput(1, &input, sizeof(INPUT));

                            input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
                            SendInput(1, &input, sizeof(INPUT));
                        }
                    }
                    if (d==3)
                    {
                        ajouterTache("clic options");
                        if (GetAsyncKeyState('A') & 0x8000)
                        {
                            INPUT input;
                            input.type = INPUT_MOUSE;
                            input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
                            SendInput(1, &input, sizeof(INPUT));

                            input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
                            SendInput(1, &input, sizeof(INPUT));
                        }
                    }
                }
            }


    }
}
