#include <iostream>
#include <chrono>
#include <windows.h> // SDK windows
#include <windowsx.h>
#include <string>
#include "Cycle.hpp"

using namespace std;
#define _WIN32_WINNT 0x0500
// definition des fonctions clics ici
void clic_ici(int x,int y)
{
    INPUT i[2];
    memset(i, 0, sizeof(i));
    i[0].type = i[1].type = INPUT_MOUSE;
    i[0].mi.dx = (65535. / (double)GetSystemMetrics(SM_CXSCREEN)) * x;
    i[0].mi.dy = (65535. / (double)GetSystemMetrics(SM_CYSCREEN)) * y;
    i[0].mi.dwFlags = MOUSEEVENTF_MOVE|MOUSEEVENTF_ABSOLUTE|MOUSEEVENTF_LEFTDOWN;
    i[1].mi.dwFlags = MOUSEEVENTF_LEFTUP;
    SendInput(2, i, sizeof(INPUT));
}

void enchainer_clic(int x,int y,int nb)
{
    for(int i=0;i<nb;i++) // suite de clics (de repetitions)
    {
        clic_ici(x,y); // on enchaine nb clics
    }
}

void clic_tache_duree_simple(int x, int y, std::string tache)
{
    /* realise un clique Ã  la position (x,y) pour une tache donnee */
    cout <<"Veuillez saisir une tache"<<endl;
    cin >>tache;
    clic_ici(x,y);
}
string renommerTache(string mot)
{
    /*renommer une tache t */
    string tache = mot;
    return tache;
}
void supprimerTache(string t)
{
    t.clear(); // supprime une tache t
}
string dupliquerTache(string t,int n)
{
    string tache = " ";
    for(int i=0;i<n;i++)/* n tours de boucles */
    {
        tache = tache +"\n"+t+"\n";
    }
    return tache;
}
string ajouterTache(string t)
{
    /* ajouter une tache t dans une autre tache  */
    string tache=" ";
    tache.append(t);
    return t;
}



int main() {
    string tache0;
    int var0;
    int tache(0);
    cout <<"Bonjour"<<endl;
    cout <<"Veuillez saisir un entier qui representera la liste des taches"<<endl;
    cout << " Cet entier doit etre compris entre 0 et 4"<<endl;
    cin >> tache;
    switch (tache)
    {
        case 0 : cout << "Click Interval"<<endl; // tache 1
        cout <<"Souhaitez vous renommer la tache ?"<<endl;
        cout << "Souhaitez vous la supprimer ?"<<endl;
        cout <<"Souhaitez vous dupliquez la tache"<<endl;
        cout <<"Souhaitez vous ajoutez la tache"<<endl;
        cout <<"Veuillez resaisir un entier mais compris entre 1 et 4"<<endl;
        cin >> var0;
        switch(var0)
        {
            case 0 :
                cout << "Veuillez saisir le nom d'une tache "<<endl;
                cin >> tache0;
                renommerTache(tache0);
                cout <<renommerTache("Click Interval")<<endl;
                break;
            case 1 :
                cout << "Saisir une tache que vous souhaitez supprimez"<<endl;
                cin >> tache0;
                supprimerTache(tache0);
                break;
            case 2 :
                cout << "Saisir une tache que vous souhaitez dupliquez"<<endl;
                cin >> tache0;
                dupliquerTache(tache0,5);
                cout <<dupliquerTache(tache0,5)<<endl;
                break;
            case 3 :
                cout << "saisir une tache que vous souhaitez ajoutez dans la liste"<<endl;
                cin >> tache0;
                ajouterTache(tache0);
                break;
            default: cout <<"resaisir un entier entre 0 et 3"<<endl;
        }
        break;
        case 1: cout <<"Click Options"<<endl; // tache 2

        break;
        case 2 : cout <<"Click Repeat"<<endl; // tache 3
        break;
        case 3 : cout <<"Cursor Position"<<endl; // tache 4
        break;
        case 4 : cout <<"Autre options"<<endl; // tache 5
        break;
        default : cout <<"resaisir un chiffre entre 1 et 4"<<endl;




    }

   // enchainer_clic(10,3,10);
    /* =================================================================================
     *
     *
     *
     */

   // SetCursorPos(0,0); // placer le curseur n'importe ou sur l'ecran
  //  Sleep(5000);
 //   clic_tache_duree_simple(10,10,"click options");
    auto t_start = std::chrono::high_resolution_clock::now(); //definis un intervalle de temps
    mouse_event(MOUSEEVENTF_LEFTDOWN, 10, 100, 0, 0); //simulation double clic gauche
    auto t_end = std::chrono::high_resolution_clock::now();
    double elapsed_time_ms = std::chrono::duration<double, std::milli>(t_end-t_start).count();
Sleep(9000);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); // double clic droit
    return 0;
}


